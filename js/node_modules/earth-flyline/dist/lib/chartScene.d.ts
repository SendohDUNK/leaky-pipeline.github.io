import { Options, SetData } from '../lib/interface';
import OperateView from '../lib/operateView';
import { Camera, Group, Object3D, OrthographicCamera, PerspectiveCamera, Renderer, Scene, WebGLRenderer } from "three";
import Store from '../lib/store/store';
import EventStore from '../lib/store/eventStore';
export default class ChartScene {
    options: Options;
    initOptions: Pick<Options, "helper" | "autoRotate" | "rotateSpeed" | "mode">;
    style: {
        width: number;
        height: number;
    };
    earthHovered: boolean;
    camera: Camera;
    isPass: Function;
    mainContainer: Object3D;
    scene: Scene;
    renderer: Renderer;
    _store: Store;
    _eventStore: EventStore;
    _OperateView: OperateView;
    constructor(params: Partial<Options>);
    on(eventName: string, cb: (params: any) => void): void;
    init(): void;
    createOrthographicCamera(): OrthographicCamera;
    createScene(): Scene;
    createCamera(): PerspectiveCamera;
    createLight(lightType: string): void;
    createHelper(): void;
    addFigures3d(): void;
    addFigures2d(): void;
    createCube(): Group;
    createRender(): WebGLRenderer;
    limitFPS(isLimit: boolean): () => true | undefined;
    shouldRotate(): boolean | undefined;
    animate(): void;
    setData: <K extends keyof SetData>(type: K, data: SetData[K]) => Promise<void>;
    addData: <K extends keyof SetData>(type: K, data: SetData[K]) => Promise<void>;
    remove(type: string, ids?: string[] | "removeAll"): void;
    transformControl(): void;
}
